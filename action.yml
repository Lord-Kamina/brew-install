name: Install and cache Homebrew packages
description: Cache Homebrew formulae and casks to speed up your workflows

inputs:
  packages:
    description:  Formulae or casks to install
    required: true
  cache:
    description: Cache the downloaded packages
    default: true
  type:
    description: The type of packages to install (formula or cask)
    default: any

branding:
  icon: package
  color: yellow

runs:
  using: "composite"
  steps:
    - name: Prepare
      id: prep
      run: |
        set -x
        packages="${{ inputs.packages }}"
        packages="${packages//$'\n'/ }"
        echo "packages=$packages" >> "$GITHUB_OUTPUT"

        flags=""
        if [ ${{ inputs.type }} != 'any' ]; then
          flags+="--${{ inputs.type }} "
        fi
        echo "flags=$flags" >> "$GITHUB_OUTPUT"

        if [ ${{ inputs.cache }} == 'true' ]; then
          mkdir .brew-install

          to_install=$(brew install $flags --dry-run --quiet -- $packages \
            | { grep --invert-match '==>' || true; })

          required="$(head -1 <<< "$to_install")"
          dependencies="$(tail -n+2 <<< "$to_install")"
          dependencies="${dependencies//$'\n'/ }"

          touch .brew-install/cache-paths.txt
          [ -z "$required" ] || brew --cache $flags -- $required >> .brew-install/cache-paths.txt
          [ -z "$dependencies" ] || brew --cache -- $dependencies >> .brew-install/cache-paths.txt
          sort --unique --output=.brew-install/cache-paths.txt .brew-install/cache-paths.txt

          sort --unique --output=.brew-install/packages.txt <<< "${to_install// /$'\n'}"

          echo 'cache-paths<<"EOF"' >> "$GITHUB_OUTPUT"
          cat .brew-install/cache-paths.txt >> "$GITHUB_OUTPUT"
          echo '"EOF"' >> "$GITHUB_OUTPUT"
        fi
      shell: bash
    - name: Restore cache
      id: cache
      if: inputs.cache == 'true' && steps.prep.outputs.cache-paths != ''
      uses: Lord-Kamina/always-upload-cache/restore@refresh-cache
      with:
        path: ${{ steps.prep.outputs.cache-paths }}
        key: brew-install-${{ hashFiles('.brew-install/packages.txt') }}-${{ hashFiles('.brew-install/cache-paths.txt') }}
        restore-keys: brew-install-${{ hashFiles('.brew-install/packages.txt') }}-
    - name: Install packages
      id: install
      if: inputs.cache != 'true' || steps.prep.outputs.cache-paths != ''
      run: |
        set -x
        brew install ${{ steps.prep.outputs.flags }} -- ${{ steps.prep.outputs.packages }}
      shell: bash
    - name: Save cache
      if: inputs.cache == 'true' && steps.prep.outputs.cache-paths != '' && steps.install.outcome == 'success'
      uses: Lord-Kamina/always-upload-cache/save@refresh-cache
      with:
        path: ${{ steps.prep.outputs.cache-paths }}
        key: ${{ steps.cache.outputs.cache-primary-key }}
        refresh-cache: 'true'
    - name: Clean up
      if: inputs.cache == 'true' && always()
      run: |
        rm -rf .brew-install
      shell: bash
